type Query {
  company(id: ID!): Company
  job(id: ID!): Job
  #! Passing limit for pagination. [Following code return- jobs:[{job1},{job2}....{job-N}]]
  # jobs(limit: Int, offset: Int): [Job!]
  #! Passing limit for pagination. [Following code return- jobs:{items: [{job1},{job2}....{job-N}], totalCount:Number} ] by using JobList schema it will also returns count as well
  jobs(limit: Int, offset: Int): JobList
}

type Mutation {
  # Approach 1 for create Mutation
  # createJob(title: String!, description: String): Job
  # OR Approach 2 for create Mutation - create an input for mutation and use it as follows
  createJob(input: CreateJobInput!): Job
  deleteJob(id: ID!): Job
  updateJob(input: UpdateJobInput!): Job
}

type Company {
  id: ID!
  name: String!
  description: String
  jobs: [Job!]!
}

type Job {
  id: ID!
  date: String!
  title: String!
  description: String
  company: Company #Object Association
}

# To return all the jobs with totalCount for the pagination
type JobList {
  items: [Job]!
  totalCount: Int
}

# Approach 2 for create Mutation starts here
input CreateJobInput {
  title: String!
  description: String
}

input UpdateJobInput {
  id: ID!
  title: String!
  description: String
}
